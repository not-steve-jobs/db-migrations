import { MigrationInterface, QueryRunner } from 'typeorm';

export class InitQuestionnaire1684413436041 implements MigrationInterface {
  public name = 'InitQuestionnaire1684413436041';

  // Fixes that I needed to do manually:
  // `score` double NULL, was wrongly autogenerated as `score` double(22) NULL, which through SQL error
  // `hidden` bit NOT NULL DEFAULT b'0', was wrongly autogenerated as `hidden` bit NOT NULL DEFAULT 'b'0''',

  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`
        CREATE TABLE \`questionnaireOptionDisclaimers\` (
          \`id\` bigint(20) NOT NULL AUTO_INCREMENT,
          \`createdAt\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
          \`updatedAt\` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
          \`bodyDescription\` varchar(255) DEFAULT NULL,
          \`bodyKey\` varchar(255) DEFAULT NULL,
          \`buttonDescription\` varchar(255) DEFAULT NULL,
          \`buttonKey\` varchar(255) DEFAULT NULL,
          \`titleDescription\` varchar(255) DEFAULT NULL,
          \`titleKey\` varchar(255) DEFAULT NULL,
          PRIMARY KEY (\`id\`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8
    `);
    await queryRunner.query(`
        CREATE TABLE \`questionnaireQuestions\` (
          \`id\` bigint(20) NOT NULL AUTO_INCREMENT,
          \`createdAt\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
          \`updatedAt\` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
          \`description\` varchar(2048) DEFAULT NULL,
          \`enabled\` bit(1) DEFAULT NULL,
          \`fieldType\` varchar(255) NOT NULL,
          \`linkKey\` varchar(255) DEFAULT NULL,
          \`linkValue\` varchar(255) DEFAULT NULL,
          \`mandatory\` bit(1) DEFAULT NULL,
          \`mandatoryCheckBoxValue\` bit(1) DEFAULT NULL,
          \`mandatoryConditions\` text,
          \`projectedQuestionKey\` varchar(255) DEFAULT NULL,
          \`published\` bit(1) DEFAULT NULL,
          \`questionKey\` varchar(255) DEFAULT NULL,
          \`readOnly\` bit(1) DEFAULT NULL,
          \`validationKey\` varchar(255) DEFAULT NULL,
          \`validationPattern\` varchar(255) DEFAULT NULL,
          \`hidden\` bit(1) NOT NULL DEFAULT b'0',
          PRIMARY KEY (\`id\`),
          UNIQUE KEY \`questionnaireQuestionsUniqueQuestionKey\` (\`questionKey\`,\`readOnly\`,\`mandatory\`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8
    `);
    await queryRunner.query(`
        CREATE TABLE \`questionnaireOptions\` (
            \`id\` bigint(20) NOT NULL AUTO_INCREMENT,
            \`createdAt\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
            \`updatedAt\` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
            \`description\` varchar(255) DEFAULT NULL,
            \`enabled\` bit(1) DEFAULT NULL,
            \`optionKey\` varchar(255) DEFAULT NULL,
            \`orderPriority\` int(11) DEFAULT NULL,
            \`published\` bit(1) DEFAULT NULL,
            \`score\` double DEFAULT NULL,
            \`questionId\` bigint(20) DEFAULT NULL,
            \`optionDisclaimerId\` bigint(20) DEFAULT NULL,
            \`fieldQuestionId\` bigint(20) DEFAULT NULL,
            PRIMARY KEY (\`id\`),
            KEY \`questionnaireOptionsFieldQuestionIdIdx\` (\`fieldQuestionId\`),
            KEY \`questionnaireOptionsOptionDisclaimerIdIdx\` (\`optionDisclaimerId\`),
            KEY \`questionnaireOptionsQuestionIdIdx\` (\`questionId\`),
            CONSTRAINT \`fkQOQuestionnaireQuestionsQuestionIdIdx\` FOREIGN KEY (\`questionId\`) REFERENCES \`questionnaireQuestions\` (\`id\`),
            CONSTRAINT \`fkQuestionnaireOptionDisclaimersIdx\` FOREIGN KEY (\`optionDisclaimerId\`) REFERENCES \`questionnaireOptionDisclaimers\` (\`id\`),
            CONSTRAINT \`fkQuestionnaireQuestionsFieldQuestionIdIdx\` FOREIGN KEY (\`fieldQuestionId\`) REFERENCES \`questionnaireQuestions\` (\`id\`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8
    `);
    await queryRunner.query(`
        CREATE TABLE \`questionnaireGroups\` (
          \`id\` bigint(20) NOT NULL AUTO_INCREMENT,
          \`createdAt\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
          \`updatedAt\` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
          \`descriptionKey\` varchar(255) DEFAULT NULL,
          \`enabled\` bit(1) DEFAULT NULL,
          \`footerDescription\` varchar(255) DEFAULT NULL,
          \`footerKey\` varchar(255) DEFAULT NULL,
          \`groupKey\` varchar(255) DEFAULT NULL,
          \`groupType\` varchar(255) NOT NULL,
          \`headerDescription\` varchar(255) DEFAULT NULL,
          \`headerKey\` varchar(255) DEFAULT NULL,
          \`imageKey\` varchar(255) DEFAULT NULL,
          \`immediate\` bit(1) DEFAULT NULL,
          \`published\` bit(1) DEFAULT NULL,
          \`title\` varchar(255) DEFAULT NULL,
          PRIMARY KEY (\`id\`),
          UNIQUE KEY \`questionnaireGroupsUniqueGroupKey\` (\`groupKey\`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8
    `);
    await queryRunner.query(`
        CREATE TABLE \`questionnaireGroupQuestionsOrder\` (
            \`groupId\` bigint(20) NOT NULL,
            \`questionId\` bigint(20) NOT NULL,
            \`createdAt\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
            \`updatedAt\` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
            \`orderPriority\` int(11) DEFAULT NULL,
            PRIMARY KEY (\`groupId\`,\`questionId\`),
            KEY \`questionnaireGroupQuestionsOrderQuestionIdIdx\` (\`questionId\`),
            CONSTRAINT \`fkQGQOQuestionnaireQuestionsQuestionIdIdx\` FOREIGN KEY (\`questionId\`) REFERENCES \`questionnaireQuestions\` (\`id\`),
            CONSTRAINT \`fkQuestionnaireGroupsGroupIdIdx\` FOREIGN KEY (\`groupId\`) REFERENCES \`questionnaireGroups\` (\`id\`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8
    `);
    await queryRunner.query(`
        CREATE TABLE \`questionnaireQuestionnaires\` (
          \`id\` bigint(20) NOT NULL AUTO_INCREMENT,
          \`createdAt\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
          \`updatedAt\` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
          \`authority\` varchar(255) DEFAULT NULL,
          \`brand\` varchar(255) DEFAULT NULL,
          \`country\` varchar(255) DEFAULT NULL,
          \`enabled\` bit(1) DEFAULT NULL,
          \`platform\` varchar(255) DEFAULT NULL,
          \`product\` varchar(255) DEFAULT NULL,
          \`published\` bit(1) DEFAULT NULL,
          \`title\` varchar(255) DEFAULT NULL,
          \`version\` varchar(255) DEFAULT NULL,
          \`tag\` varchar(255) DEFAULT NULL,
          PRIMARY KEY (\`id\`),
          UNIQUE KEY \`questionnaireQuestionnairesUnqAuthorityCountryProductPlatform\` (\`authority\`,\`country\`,\`product\`,\`platform\`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8
    `);
    await queryRunner.query(`
        CREATE TABLE \`questionnaireQuestionnaireGroupsOrder\` (
            \`groupId\` bigint(20) NOT NULL,
            \`questionnaireId\` bigint(20) NOT NULL,
            \`createdAt\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
            \`updatedAt\` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
            \`orderPriority\` int(11) DEFAULT NULL,
            PRIMARY KEY (\`groupId\`,\`questionnaireId\`),
            KEY \`questionnaireQuestionnaireGroupsOrderIdx\` (\`questionnaireId\`),
            CONSTRAINT \`fkQQGOQuestionnaireGroupsGroupIdIdx\` FOREIGN KEY (\`groupId\`)
                REFERENCES \`questionnaireGroups\` (\`id\`),
            CONSTRAINT \`fkQQGOQuestionnaireQuestionnairesQuestionnaireIdIdx\` FOREIGN KEY (\`questionnaireId\`)
                REFERENCES \`questionnaireQuestionnaires\` (\`id\`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8
    `);
    await queryRunner.query(`
        CREATE TABLE \`questionnaireOptionsEligibleFor\` (
            \`id\` bigint(20) NOT NULL,
            \`eligibleFor\` varchar(255) NOT NULL,
            PRIMARY KEY (\`id\`,\`eligibleFor\`),
            CONSTRAINT \`fkQuestionnaireOptionsIdIdx\` FOREIGN KEY (\`id\`) REFERENCES \`questionnaireOptions\` (\`id\`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8
    `);
    await queryRunner.query(`
        CREATE TABLE \`questionnaireQuestionsEligibleFor\` (
            \`id\` bigint(20) NOT NULL,
            \`eligibleFor\` varchar(255) NOT NULL,
            PRIMARY KEY (\`id\`,\`eligibleFor\`),
            CONSTRAINT \`fkQQEFQuestionnaireQuestionsIdIdx\` FOREIGN KEY (\`id\`) REFERENCES \`questionnaireQuestions\` (\`id\`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8
    `);
    await queryRunner.query(`
        CREATE TABLE \`questionnaireQuestionsMandatoryFor\` (
            \`id\` bigint(20) NOT NULL,
            \`mandatoryFor\` varchar(255) NOT NULL,
            PRIMARY KEY (\`id\`,\`mandatoryFor\`),
            CONSTRAINT \`fkQQMFQuestionnaireQuestionsIdIdx\` FOREIGN KEY (\`id\`) REFERENCES \`questionnaireQuestions\` (\`id\`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8
    `);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`ALTER TABLE \`questionnaireQuestionsMandatoryFor\` DROP FOREIGN KEY \`fkQQMFQuestionnaireQuestionsIdIdx\``);
    await queryRunner.query(`ALTER TABLE \`questionnaireQuestionsEligibleFor\` DROP FOREIGN KEY \`fkQQEFQuestionnaireQuestionsIdIdx\``);
    await queryRunner.query(`ALTER TABLE \`questionnaireOptionsEligibleFor\` DROP FOREIGN KEY \`fkQuestionnaireOptionsIdIdx\``);
    await queryRunner.query(`ALTER TABLE \`questionnaireQuestionnaireGroupsOrder\` DROP FOREIGN KEY \`fkQQGOQuestionnaireQuestionnairesQuestionnaireIdIdx\``);
    await queryRunner.query(`ALTER TABLE \`questionnaireQuestionnaireGroupsOrder\` DROP FOREIGN KEY \`fkQQGOQuestionnaireGroupsGroupIdIdx\``);
    await queryRunner.query(`ALTER TABLE \`questionnaireGroupQuestionsOrder\` DROP FOREIGN KEY \`fkQuestionnaireGroupsGroupIdIdx\``);
    await queryRunner.query(`ALTER TABLE \`questionnaireGroupQuestionsOrder\` DROP FOREIGN KEY \`fkQGQOQuestionnaireQuestionsQuestionIdIdx\``);
    await queryRunner.query(`ALTER TABLE \`questionnaireOptions\` DROP FOREIGN KEY \`fkQuestionnaireQuestionsFieldQuestionIdIdx\``);
    await queryRunner.query(`ALTER TABLE \`questionnaireOptions\` DROP FOREIGN KEY \`fkQuestionnaireOptionDisclaimersIdx\``);
    await queryRunner.query(`ALTER TABLE \`questionnaireOptions\` DROP FOREIGN KEY \`fkQOQuestionnaireQuestionsQuestionIdIdx\``);
    await queryRunner.query(`DROP TABLE \`questionnaireQuestionsMandatoryFor\``);
    await queryRunner.query(`DROP TABLE \`questionnaireQuestionsEligibleFor\``);
    await queryRunner.query(`DROP TABLE \`questionnaireOptionsEligibleFor\``);
    await queryRunner.query(`DROP INDEX \`questionnaireQuestionnaireGroupsOrderIdx\` ON \`questionnaireQuestionnaireGroupsOrder\``);
    await queryRunner.query(`DROP TABLE \`questionnaireQuestionnaireGroupsOrder\``);
    await queryRunner.query(`DROP INDEX \`questionnaireQuestionnairesUnqAuthorityCountryProductPlatform\` ON \`questionnaireQuestionnaires\``);
    await queryRunner.query(`DROP TABLE \`questionnaireQuestionnaires\``);
    await queryRunner.query(`DROP INDEX \`questionnaireGroupQuestionsOrderQuestionIdIdx\` ON \`questionnaireGroupQuestionsOrder\``);
    await queryRunner.query(`DROP TABLE \`questionnaireGroupQuestionsOrder\``);
    await queryRunner.query(`DROP INDEX \`questionnaireGroupsUniqueGroupKey\` ON \`questionnaireGroups\``);
    await queryRunner.query(`DROP TABLE \`questionnaireGroups\``);
    await queryRunner.query(`DROP INDEX \`questionnaireQuestionsUniqueQuestionKey\` ON \`questionnaireQuestions\``);
    await queryRunner.query(`DROP TABLE \`questionnaireQuestions\``);
    await queryRunner.query(`DROP INDEX \`questionnaireOptionsQuestionIdIdx\` ON \`questionnaireOptions\``);
    await queryRunner.query(`DROP INDEX \`questionnaireOptionsOptionDisclaimerIdIdx\` ON \`questionnaireOptions\``);
    await queryRunner.query(`DROP INDEX \`questionnaireOptionsFieldQuestionIdIdx\` ON \`questionnaireOptions\``);
    await queryRunner.query(`DROP TABLE \`questionnaireOptions\``);
    await queryRunner.query(`DROP TABLE \`questionnaireOptionDisclaimers\``);
  }

}
